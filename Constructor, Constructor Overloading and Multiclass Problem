Constructor, Constructor Overloading and Multiclass Problem 

#Task-1
Design the Student class in such a way that it produces the following output.
public class StudentTester{
   public static void main(String[] args){
       Student s1 = new Student("Harry", "CSE");
       System.out.println(s1.name);
       s1.updateName("Harry Potter");
       System.out.println(s1.name);
       System.out.println(s1.prog);
       s1.updateProgram("CS");
       String prog = s1.accessProgram();
       System.out.println(prog);
   }
}
public class Student {
    String name;
    String prog;

    // Constructor
    public Student(String n, String p) {
        name = n;
        prog = p;
    }

    // Method to update name
    public void updateName(String newName) {
        name = newName;
    }

    // Method to update program
    public void updateProgram(String newProg) {
        prog = newProg;
    }

    // Method to access program
    public String accessProgram() {
        return prog;
    }
}
#Task-02
Design the Toy class in such a way that it produces the following output
public class ToyTester{
    public static void main(String[] args){
        Toy t1 = new Toy("Car", 230);
        System.out.println("1=================");
        t1.updatePrice(250);
        System.out.println("2=================");
        System.out.println(t1.name);
        t1.showPrice();
        System.out.println("3=================");
        Toy t2 = new Toy("Robot", 450);
        System.out.println("4=================");
        t2.updateName("Autobot");
        System.out.println("5=================");
        System.out.println(t2.name);
        t2.showPrice();
    }
}
public class Toy{
  public String name;
  public int price;
  
  public Toy(String a,int b){
    System.out.println("A new toy has been made!");
    name=a;
    price=b;
  }
  
  public void updatePrice(int a){
    price=a;
  }
  
  public void showPrice(){
    System.out.println("Price:"+ price+" "+"Taka");
  }
  
  public void updateName(String a){
    System.out.println("Changing old name:"+ name);
    name=a;
    System.out.println("new name:"+ name);
  }
}

#Task-03
Design the Shape2D class in such a way that it produces the following output.
public class Shape2DTester {
  public static void main(String[] args) {
    Shape2D sq = new Shape2D();
    System.out.println("---------1----------");
    sq.area();
    System.out.println("---------2----------");
    Shape2D rectangle = new Shape2D(5,6);
    System.out.println("---------3----------");
    rectangle.area();
    System.out.println("---------4----------");
    Shape2D tri1 = new Shape2D(5,6,"Triangle");
    System.out.println("---------5----------");
    tri1.area();
    System.out.println("---------6----------");
    Shape2D tri2 = new Shape2D(5,6,7);
    System.out.println("---------7----------");
    tri2.area();
    System.out.println("---------8----------");
  }
}
public class Shape2D{
  public String name="Square";
  public int length=5;
  public double area;
  
  public void area(){
    System.out.println("The area of the"+" "+name+":"+" "+ area);
  }
  
  public Shape2D(){
    area=4*length;
    System.out.println("A Square has been created with length: 5");
  }
  
  public Shape2D(int a,int b){
    name="Rectangle";
    area=a*b;
    System.out.println("A Rectangle has been created with length:"+ a + "and breadth:"+ b);
  }
  
   public Shape2D(int a,int b, String c){
    name=c;
    area=a*b*0.5;
    System.out.println("A triangle has been created with height:"+a+" and base:"+ b);
  }
   
    public Shape2D(int a,int b,int c){
    name="Triangle";
    double s=(a+b+c)*0.5;
    double p=s*(s-a)*(s-b)*(s-c);
    area=Math.sqrt(p);
      System.out.println("A triangle has been created with following sides"+ a+","+b+","+c);
  }
}

#Task-04
Write  “Student“ class to show the following expected outputs
Note:
❖	A student can’t take any course until the CGPA is set.
❖	A student cannot take more than 4 courses.
❖	A student with CGPA below 3 cannot take more than 3 courses.

public class StudentDriver {
  public static void main(String[] args){
    Student student1 = new Student(12345678);
    System.out.println("1-----------------");
    student1.addCourse("CSE110");
    System.out.println("2-----------------");
    student1.storeCG(2.5);
    student1.addCourse("CSE110");
    student1.addCourse("ENG101");
    student1.showAdvisee();
    System.out.println("3-----------------");
    student1.removeAllCourse();
    student1.showAdvisee();
    System.out.println("4-----------------");
    student1.storeID(54652365);
    String[] courses = {"SOC101","CSE111","ENG102"};
    student1.addCourse(courses);
    student1.showAdvisee();
    System.out.println("5-----------------");
    student1.addCourse("CSE230");
    student1.showAdvisee();
    System.out.println("6-----------------");
    Student student2 = new Student(975738383,3.7);
    System.out.println("7-----------------");
    String[] courses2 = {"CSE220","PHY112","MAT120","BUS101","CHN101"};
    student2.addCourse(courses2);
    student2.showAdvisee();
  }
}

public class Student {
    private int id;
    private double cgpa;
    private String[] courses;
    private int courseCount;

    // Constructor 1: Only ID
    public Student(int id) {
        this.id = id;
        System.out.println("A student with ID " + id + " has been created.");
        this.courses = new String[4]; // Max 4 courses allowed
        this.courseCount = 0;
    }

    // Constructor 2: ID and CGPA
    public Student(int id, double cgpa) {
        this.id = id;
        this.cgpa = cgpa;
        System.out.println("A student with ID " + id + " and cgpa " + cgpa + " has been created.");
        this.courses = new String[4];
        this.courseCount = 0;
    }

    // Method to store/update CGPA
    public void storeCG(double cg) {
        this.cgpa = cg;
    }

    // Method to store/update ID
    public void storeID(int newID) {
        this.id = newID;
    }

    // Add a single course
    public void addCourse(String course) {
        if (cgpa == 0.0) {
            System.out.println("Failed to add " + course);
            System.out.println("Set CG first");
            return;
        }

        int maxCourses = (cgpa < 3.0) ? 3 : 4;

        if (courseCount >= maxCourses) {
            System.out.println("Failed to add " + course);
            if (cgpa < 3.0)
                System.out.println("CG is low. Can't add more than 3 courses.");
            else
                System.out.println("Maximum 4 courses allowed.");
            return;
        }

        courses[courseCount] = course;
        courseCount++;
    }

    // Add multiple courses
    public void addCourse(String[] newCourses) {
        for (int i = 0; i < newCourses.length; i++) {
            addCourse(newCourses[i]);
        }
    }

    // Remove all courses
    public void removeAllCourse() {
        this.courses = new String[4];
        this.courseCount = 0;
    }

    // Show advisee info
    public void showAdvisee() {
        System.out.println("Student ID: " + id + ", CGPA: " + cgpa);

        if (courseCount == 0) {
            System.out.println("No courses added.");
            return;
        }

        System.out.println("Added courses are:");
        for (int i = 0; i < courseCount; i++) {
            System.out.print(courses[i] + " ");
        }
        System.out.println();
    }
}

#Task-05
Design the Triangle Class that will produce the following output. We will consider both triangles to have the same sides if all sides are equal in the same orientation/sequence only.
Types of Triangle:
●	Equilateral: When all sides in the same orientation are equal.
●	Isosceles: When any two sides of a triangle in the same orientation are equal.
●	Scalene: When all sides are of different lengths.

public class TriangleTester{
 public static void main(String args[]){
   Triangle t1 =  new Triangle();
   Triangle t2 =  new Triangle();
   Triangle t3 =  new Triangle();
   Triangle t4 =  new Triangle();

   t1.updateSides(4, 4, 4);
   t2.updateSides(4, 5, 6);
   t3.updateSides(4, 5, 6);
   t4.updateSides(5, 4, 6);

   t1.triangleDetails();
   System.out.println("--------1--------");
   System.out.println(t1.printTriangleType());
   System.out.println("--------2--------");
   t3.triangleDetails();
   System.out.println(t3.printTriangleType());
   System.out.println("--------3--------");
   t4.triangleDetails();
   System.out.println(t4.printTriangleType());
   System.out.println("--------4--------");
   t2.compareTrinagles(t3);
   System.out.println("--------5--------");
   t1.compareTrinagles(t2);
   System.out.println("--------6--------");
   t1 = t2;
   t1.compareTrinagles(t2);
   System.out.println("--------7--------");
   t3.compareTrinagles(t4);
 }
}

public class Triangle {
    private int side1;
    private int side2;
    private int side3;

    // Default constructor
    public Triangle() {
        side1 = 0;
        side2 = 0;
        side3 = 0;
    }

    // Method to update sides
    public void updateSides(int s1, int s2, int s3) {
        side1 = s1;
        side2 = s2;
        side3 = s3;
    }

    // Method to show triangle details
    public void triangleDetails() {
        System.out.println("Three sides of the triangle are: " + side1 + ", " + side2 + ", " + side3);
        System.out.println("Perimeter: " + (side1 + side2 + side3));
    }

    // Method to print triangle type
    public String printTriangleType() {
        if (side1 == side2 && side2 == side3) {
            return "This is an Equilateral Triangle.";
        } else if (side1 == side2 || side2 == side3 || side1 == side3) {
            return "This is an Isosceles Triangle.";
        } else {
            return "This is a Scalene Triangle.";
        }
    }

    // Method to compare triangles
    public void compareTrinagles(Triangle t) {
        // Check if both references point to the same object
        if (this == t) {
            System.out.println("These two triangle objects have the same address.");
            return;
        }

        // Check if sides are equal in same orientation
        boolean sidesEqual = (this.side1 == t.side1 && this.side2 == t.side2 && this.side3 == t.side3);

        // Check if perimeter is equal
        int thisPerimeter = side1 + side2 + side3;
        int tPerimeter = t.side1 + t.side2 + t.side3;

        if (sidesEqual) {
            System.out.println("Addresses are different but the sides of the triangles are equal.");
        } else if (thisPerimeter == tPerimeter) {
            System.out.println("Only the perimeter of both triangles is equal.");
        } else {
            System.out.println("Addresses, length of the sides and perimeter all are different.");
        }
    }
}

#Task-06

Write the Teacher and Course classes so that the TestTeacher class produces the outputs given. Hint: A teacher can add a maximum of 3 courses. 

public class TestTeacher{
  public static void main(String [] args){
    Teacher t1 = new Teacher("Matin Saad Abdullah","MSA");
    Teacher t2 = new Teacher("Mumit Khan","MMK");
    Teacher t3 = new Teacher("Sadia Hamid Kazi","SKZ");                         
    Course c1 = new Course("CSE 110");
    Course c2 = new Course("CSE 111");
    Course c3 = new Course("CSE 220"); 
    Course c4 = new Course("CSE 221");
    Course c5 = new Course("CSE 230"); 
    Course c6 = new Course("CSE 310");
    Course c7 = new Course("CSE 320"); 
    Course c8 = new Course("CSE 340");
    t1.addCourse(c1);
    t1.addCourse(c2);
    t2.addCourse(c3);
    t2.addCourse(c4);
    t2.addCourse(c5);
    t3.addCourse(c6);
    t3.addCourse(c7); 
    t3.addCourse(c8);
    System.out.println("1========================");
    t1.printDetail();
    System.out.println("2========================");
    t2.printDetail();
    System.out.println("3========================");
    t3.printDetail();
  }
}

public class Teacher {  // Teacher class
  private String name;
  private String initial;
  private Course[] courses = new Course[3];
  private int courseCount = 0;

  public Teacher(String name, String initial) {
    this.name = name;
    this.initial = initial;
    System.out.println("A new teacher has been created");
  }

  public void addCourse(Course c) {
    if (courseCount < 3) {
      courses[courseCount] = c;
      courseCount++;
    }
  }

  public void printDetail() {
    System.out.println("Name: " + name);
    System.out.println("Initial: " + initial);
    System.out.println("List of courses:");
    for (int i = 0; i < courseCount; i++) {
      System.out.println(courses[i].getCourseName());
    }
  }
}

public class Course {  // Course class
  private String courseName;

  public Course(String courseName) {
    this.courseName = courseName;
  }

  public String getCourseName() {
    return courseName;
  }
}

#Task-07
Design the required class/es so that the following output is generated. Read the following description:
1.	You may assume that to board a bus, a student must have the bus pass, and his/her destination must match the route of the bus.
2.	Additionally, the default maximum capacity of the bus is 2.

public class BracuStudentTester {
 public static void main(String[] args) {
  BracuStudent st1 = new BracuStudent("Afif", "Mirpur");
  System.out.println("1===============");
  BracuStudent st2 = new BracuStudent("Shanto", "Motijheel");
  BracuStudent st3 = new BracuStudent("Taskin", "Mirpur");
  st1.showDetails();
  st2.showDetails();
  System.out.println("2===============");
  st3.showDetails();
  System.out.println("3===============");
  BracuBus bus1 = new BracuBus("Mirpur");
  BracuBus bus2 = new BracuBus("Azimpur", 5);
  bus1.showDetails();
  bus2.showDetails();
  System.out.println("4===============");
  st2.getPass();
  st3.getPass();
  System.out.println("5===============");
  st2.showDetails();
  st3.showDetails();
  System.out.println("6===============");
  bus1.board();
  System.out.println("7===============");
  bus1.board(st1, st2);
  System.out.println("8===============");
  st1.getPass();
  st2.updateHome("Mirpur");
  st1.showDetails();
  st2.showDetails();
  System.out.println("9===============");
  bus1.board(st1);
  bus1.board(st2, st3);
  System.out.println("10===============");
  bus1.showDetails();
 }
}

public class BracuStudent {
  private String name;
  private String home;
  private boolean hasPass;

  public BracuStudent(String name, String home) {
    this.name = name;
    this.home = home;
    this.hasPass = false;
  }

  public void showDetails() {
    System.out.println("Student Name: " + name);
    System.out.println("Lives in " + home);
    System.out.println("Have Bus Pass? " + hasPass);
  }

  public void getPass() {
    hasPass = true;
  }

  public void updateHome(String newHome) {
    home = newHome;
  }

  public boolean hasPass() {
    return hasPass;
  }

  public String getHome() {
    return home;
  }

  public String getName() {
    return name;
  }
}

public class BracuBus {
  private String route;
  private int maxCapacity;
  private BracuStudent[] passengers;
  private int passengerCount;

  public BracuBus(String route) {
    this.route = route;
    this.maxCapacity = 2;
    passengers = new BracuStudent[maxCapacity];
    passengerCount = 0;
  }

  public BracuBus(String route, int maxCapacity) {
    this.route = route;
    this.maxCapacity = maxCapacity;
    passengers = new BracuStudent[maxCapacity];
    passengerCount = 0;
  }

  public void showDetails() {
    System.out.println("Bus Route: " + route);
    System.out.println("Passenger Count: " + passengerCount + " (Max: " + maxCapacity + ")");
    System.out.print("Passengers on Board: ");
    if (passengerCount == 0) {
      System.out.println();
    } else {
      System.out.println();
      for (int i = 0; i < passengerCount; i++) {
        System.out.print(passengers[i].getName());
        if (i < passengerCount - 1) System.out.print(" ");
      }
      System.out.println();
    }
  }

  public void board() {
    System.out.println("No passengers");
  }

  public void board(BracuStudent s1) {
    if (!s1.hasPass()) {
      System.out.println("You don't have a bus pass!");
      return;
    }
    if (!s1.getHome().equals(route)) {
      System.out.println("You got on the wrong bus!");
      return;
    }
    if (passengerCount >= maxCapacity) {
      System.out.println("Bus is full!");
      return;
    }
    passengers[passengerCount] = s1;
    passengerCount++;
    System.out.println(s1.getName() + " boarded the bus.");
  }

  public void board(BracuStudent s1, BracuStudent s2) {
    board(s1);
    board(s2);
  }
}

#Task-08

Design the Student and the Usis class so that the following output is produced.
Note:
●	A student's email, password, and login status are null by default while creating an object of the Student class.
●	Your code should satisfy the conditions mentioned in the output only.
●	Usis class will have two instance variables: totalAdvisee and an array of Student type to store the student object. The array will be updated inside the advising() method only when the advising is successful.
●	Usis can take at most 5 advisees.

public class UsisTester {
  public static void main(String[] args) {
    Student rakib = new Student("Rakib", 12301455, "CSE");
    Student roy = new Student("Roy", 12501345, "CS");
    System.out.println("1*************");
    Usis usisObj = new Usis();
    System.out.println("2*************");
    usisObj.login(rakib);
    System.out.println("3*************");
    usisObj.advising(rakib);
    System.out.println("4*************");
    rakib.email = "rakib@hotmail.com";
    rakib.password = "1234";
    System.out.println("5*************");
    usisObj.login(rakib);
    System.out.println("6*************");
    usisObj.advising(rakib);
    System.out.println("7*************");
    usisObj.advising(rakib, "CSE110", "PHY111", "MAT110", "CSE260");
    System.out.println("8*************");
    usisObj.advising(rakib, "CSE110", "PHY111", "MAT110");
    System.out.println("9*************");
    usisObj.allAdviseeInfo();
    System.out.println("10*************");
    roy.email = "roy@hotmail.com";
    roy.password = "abcd";
    usisObj.login(roy);
    System.out.println("11*************");
    usisObj.advising(roy, "CSE110", "ENG101", "PHY112");
    System.out.println("12*************");
    usisObj.allAdviseeInfo();
  }
}

public class Student {
  String name;
  int id;
  String department;
  String email;
  String password;
  boolean loginStatus;
  String[] advisedCourses;

  public Student(String name, int id, String department) {
    this.name = name;
    this.id = id;
    this.department = department;
    System.out.println("Student object is created");
  }

  public void showInfo() {
    System.out.println("Name: " + name + " ID: " + id);
    System.out.println("Department: " + department);
    System.out.println("Advised Courses: ");
    for (int i = 0; i < advisedCourses.length; i++) {
      System.out.print(advisedCourses[i]);
      if (i < advisedCourses.length - 1) System.out.print(" ");
    }
    System.out.println("\n==============");
  }
}

public class Usis {
  int totalAdvisee;
  Student[] advisees;

  public Usis() {
    advisees = new Student[5];
    totalAdvisee = 0;
    System.out.println("Usis is ready to use!");
  }

  public void login(Student s) {
    if (s.email == null || s.password == null) {
      System.out.println("Email and password need to be set.");
    } else {
      s.loginStatus = true;
      System.out.println("Login successful");
    }
  }

  public void advising(Student s) {
    if (!s.loginStatus) {
      System.out.println("Please login to advise courses!");
      return;
    }
    System.out.println("You haven't selected any courses.");
  }

  public void advising(Student s, String c1, String c2, String c3, String c4) {
    if (!s.loginStatus) {
      System.out.println("Please login to advise courses!");
      return;
    }
    System.out.println("You need special approval to take more than 3 courses.");
  }

  public void advising(Student s, String c1, String c2, String c3) {
    if (!s.loginStatus) {
      System.out.println("Please login to advise courses!");
      return;
    }
    s.advisedCourses = new String[3];
    s.advisedCourses[0] = c1;
    s.advisedCourses[1] = c2;
    s.advisedCourses[2] = c3;
    advisees[totalAdvisee] = s;
    totalAdvisee++;
    System.out.println("Advising successful!");
  }

  public void allAdviseeInfo() {
    System.out.println("Total Advisee: " + totalAdvisee);
    for (int i = 0; i < totalAdvisee; i++) {
      advisees[i].showInfo();
    }
  }
}

#Task-09
Design the Parcel class in such a way that it produces the following output.
NOTE: For the method calcFee(), if the delivery location is Dhanmondi, then the location charge will be 50 taka or else it’ll be free. Also, while calculating total fee, if the product weight is 0 the total_fee would also be 0.
Formula: fee = (weight * 20) + location_charge (if any)

public class ParcelDriver {
   public static void main(String[] args){
      Parcel p1 = new Parcel();
      p1.printDetails();
      p1.name = "Spongebob";
      p1.printDetails();
      System.out.println("1**************");
      Parcel p2 = new Parcel("Bob the Builder");
      p2.weight = 15; 
      p2.calcFee("Gulshan");
      p2.printDetails();
      System.out.println("2**************");
      p2.addWeight(25);
      p2.calcFee("Banani");        
 p2.printDetails();
      System.out.println("3**************");
      Parcel p3 = new Parcel("Dora the Explorer", 10);
      p3.addWeight(15);
      p3.calcFee("Dhanmondi");
      p3.printDetails();
   }
}

public class Parcel {
  String name;
  int weight;
  double totalFee;

  public Parcel() {
    System.out.println("Set name first");
  }

  public Parcel(String name) {
    this.name = name;
  }

  public Parcel(String name, int weight) {
    this.name = name;
    this.weight = weight;
  }

  public void addWeight(int w) {
    weight += w;
    System.out.println("Updated Weight: " + weight);
  }

  public void calcFee(String location) {
    if (weight == 0) {
      totalFee = 0.0;
      return;
    }
    int locationCharge = 0;
    if (location.equals("Dhanmondi")) {
      locationCharge = 50;
    }
    totalFee = (weight * 20) + locationCharge;
  }

  public void printDetails() {
    System.out.println("Name: " + name);
    System.out.println("Total Weight: " + weight);
    System.out.println("Total Fee: " + totalFee);
  }
}









    
  
    
  
  
  
  
    


# Object-Oriented-Programming-OOP-Codes-

#Task-01
we are given the following “University” class: 

public class University{
    public String name;
    public String country;
}
Now writing a Java tester class named “UniversityTester”.

a.Write the main method and create 2 objects of University class and print the location of the objects and print the instance variables of the objects. Are the location of the objects the same? 

b.Now change the instance variables of the first object.
 name =  “Imperial College London”
 country = “England”

Now change the instance variables of the second object.
	name =  “BRAC University”
country = “Bangladesh”

public class UniversityTester{
  public static void main(String[] args){
    University u1=new University();
    University u2=new University();
    
    System.out.println(u1);
    System.out.println(u2);
    System.out.println(u1.name);
    System.out.println(u1.country);
    System.out.println(u2.name);
    System.out.println(u2.country);
    u1.name="Imperial College of London";
    u1.country="England";
    u2.name="Brac university";
    u2.country="Bangladesh";
    System.out.println(u1.name);
    System.out.println(u1.country);
    System.out.println(u2.name);
    System.out.println(u2.country);
  }
}
public class University{
    public String name;
    public String country;
}
#Task-02
Design the “Student” class so that the main method prints the following:

public class StudentTester2{
   public static void main(String [] args){
      Student s1 = new Student();
      System.out.println("Name of the Student: "+s1.name);
      System.out.println("ID of the Student: "+s1.id);
      s1.name = "Bob";
      s1.id = 123;
      System.out.println("Name of the Student: "+s1.name);
      System.out.println("ID of the Student: "+s1.id);
   }
}

public class Student{
  public String name;
  public int id;
}

#Task-03
Design the Course class to generate the correct output from the driver code provided 

public class Tester3{
  public static void main(String[] args) {
    Course c1 = new Course();
    Course c2 = new Course();  
    c1.updateDetails("Programming Language I","CSE110", 3);
    System.out.println("========== 1 ==========");
    c1.displayCourse(); 
    c2.updateDetails("Data Structures","CSE220", 3);
    System.out.println("========== 2 ==========");
    c2.displayCourse();  
    c1.updateDetails("Programming Language II","CSE111", 3);
    System.out.println("========== 3 ==========");
    c1.displayCourse();
  }
}
public class Course{
  public String name;
  public String code;
  public int credit;
  
  public void updateDetails(String a,String b,int c){
    name=a;
    code=b;
    credit=c;
  }
  
  public void displayCourse(){
    System.out.println("Course Name: "+name);
    System.out.println("Course Code: "+code);
    System.out.println("Course Credit: "+credit);
  }
}

#Tasks-04
Design the CellPhone class so that the main method of tester class can produce the following output:

public class Tester4{
  public static void main(String[]args){
     CellPhone phone1 = new CellPhone();
     phone1.printDetails();
     phone1.model ="Nokia 1100";
     System.out.println("1##################");
     phone1.storeContact("Joy - 01834");
     System.out.println("===================");
     phone1.printDetails();
     System.out.println("2##################");
     phone1.storeContact("Toya - 01334");
     phone1.storeContact("Aayan - 01135");
     System.out.println("===================");
     phone1.printDetails();
     System.out.println("3##################");
     phone1.storeContact("Sani - 01441");
     System.out.println("===================");
     phone1.printDetails();  
  }
}
public class CellPhone{
  public String model="unknown";
  public String [] arr1= new String [3];
  public int number;
  
  public void printDetails(){
    if(number==0){
    System.out.println("Phone Model "+model);
    System.out.println("Contacts Stored "+number);
    }
    else{
    System.out.println("Phone Model "+model);
    System.out.println("Contacts Stored "+number);
    System.out.println("Stored Contacts :");
    for(int i=0;i<number;i++){
      System.out.println(arr1[i]);
    }
  }
  }
  
  public void storeContact(String a){
    if(number<3){
    arr1[number]=a;
    number++;
    System.out.println("Contact Stored");
  }
    else {
      System.out.println("Memory full. New contact can't be stored.");
    }
  }
}

#Task-05
Consider the following class:

public class Human{
    public int age;
    public double height;
}
public class main{
public static void main(string {} args){
	Human h1 = new Human();
	Human h2 = new Human();
	h1.age = 21;
	h1.height = 5.5;
	System.out.println(h1.age);
	System.out.println(h1.height);
	h2.height = h1.height - 3;
	System.out.println(h2.height);
	h2.age = h1.age++;
	System.out.println(h1.age);
	h2 = h1;
	System.out.println(h2.age);
	System.out.println(h2.height);
	h2.age++;
	h2.height++;
	System.out.println(h1.age);
	System.out.println(h1.height);
	h1.age = ++h2.age;
	System.out.println(h2.age);
	System.out.println(h2.height);	
}
#Task-06
Design the CSECourse class to generate the correct output from the driver code provided below:

public class CourseTester{
  public static void main(String args []){
    CSECourse c1 = new CSECourse();
    System.out.println("Course Name: "+c1.courseName);
    System.out.println("Course Code: "+c1.courseCode);
    System.out.println("Credit: "+c1.credit);
   }
}
public class CSECourse{
  public String courseName="Programming Language II";
  public String courseCode="CSE111";
  public int credit=3;
}

#Task-07
Design the “ImaginaryNumber”  class to generate the output given below:

public class Tester7{
  public static void main(String [] args){
     ImaginaryNumber num1 = new ImaginaryNumber();
     String p = num1.printNumber();
     System.out.println(p);
     System.out.println("1********");
     num1.realPart=3;
     num1.imaginaryPart=7;
     System.out.println(num1.printNumber());
     System.out.println("2********");
     ImaginaryNumber num2 = new ImaginaryNumber();
     num2.realPart=1;
     num2.imaginaryPart=9;
     System.out.println(num2.printNumber());
    }
}
public class ImaginaryNumber{
  public int realPart=0;
  public int imaginaryPart=0;
  
  public void printNumber(){
    System.out.println(realPart+" + "+imaginaryPart+"i");
  }
}

#Task-08
Implement the “Assignment” class with necessary properties, so that the given output is produced for the provided driver code.

public class AssignmentTester{
  public static void main(String [] args){
    Assignment as1 = new Assignment();
    as1.printDetails();
    System.out.println("1---------------");
    as1.tasks = 11;
    as1.difficulty = "Moderate";
    as1.submission = true;
    as1.printDetails();
    System.out.println("2---------------");
    System.out.println(as1.makeOptional());
    System.out.println("3---------------");
    as1.printDetails();
    System.out.println("4---------------");
    Assignment as2 = new Assignment();
    as2.tasks = 12;
    as2.difficulty = "Hard";
    as2.submission = false;
    as2.printDetails();
    System.out.println("5---------------");
    System.out.println(as2.makeOptional());
  }
}

public class Assignment{
  public int tasks;
  public String difficulty;
  public boolean submission;
  
  public void printDetails(){
    System.out.println("Number of tasks: "+tasks);
    System.out.println("Difficulty level: "+difficulty);
    System.out.println("Submission required: "+submission);
  }
  
  public String makeOptional(){
    if(submission==true){
    submission=false;
    return "Assignment will not require submission";
  }
    else if(submission==false){
     return "Submission is already not required" ;
    }
    return "";
  }
}

#Task-09
Create an Employee class to provide the expected output. 
●An employee will have a name, salary and designation.
●The name will be assigned inside the newEmployee() method
●Whenever a New Employee joins his/her salary will be Tk. 30,000 and the designation will be junior.
●Employees with salaries greater than Tk. 50,000 and Tk. 30,000 need to pay 30% and 10% of salary as tax respectively.
●Employees can be promoted to senior, lead and manager positions. Based on their promotion they will get an increment of Tk. 25,000, Tk. 50,000 and Tk. 75,000 respectively.

public class Tester09{
  public static void main(String[] args){

    Employee emp1 = new Employee();
    Employee emp2 = new Employee();
    Employee emp3 = new Employee();
      
    emp1.newEmployee("Harry Potter");
    emp2.newEmployee("Hermione Granger");
    emp3.newEmployee("Ron Weasley");
    System.out.println("1 ==========");
    emp1.displayInfo();
    System.out.println("2 ==========");
    emp2.displayInfo();
    System.out.println("3 ==========");
    emp3.displayInfo();
    System.out.println("4 ==========");
    emp1.calculateTax();
    System.out.println("5 ==========");
    emp1.promoteEmployee("lead");
    System.out.println("6 ==========");
    emp1.calculateTax();
    System.out.println("7 ==========");
    emp1.displayInfo();
    System.out.println("8 ==========");
    emp3.promoteEmployee("manager");
    System.out.println("9 ==========");
    emp3.calculateTax();
    System.out.println("10 ==========");
    emp3.displayInfo();
  }
}

public class Employee{
  private String name;
  private int id;
  private String type;
  
  public Employee(){
    System.out.println("A default employee has been created");
  }
  public Employee(String a, int b, String c){
    name=a;
    id=b;
    type=c;
  }
  
  public String getType(){
    return type;
  }
  public String getName(){
    return name;
  }
  public int getID(){
    return id;
  }
}

#Task-10
Complete the Bird class so that main method runs properly:
public class Test10{
    public static void main(String args[]) { 
        Bird b1 = new Bird();
        b1.name = "Parrot";
        b1.flyUp(3);
        b1.makeNoise();
        b1.flyDown(5);
        b1.flyDown(2);
        b1.flyDown(1);
        Bird b2 = new Bird();
        b2.name = "Eagle"; 
        b2.flyUp(5);
        b2.flyDown(5);
        b2.makeNoise(); 
    }  
}
public class Bird {
    String name;
    int height = 0; // current flying height in feet

    void flyUp(int feet) {
        height += feet;
        System.out.println(name + " has flown up " + feet + " feet.");
    }

    void flyDown(int feet) {
        if (feet > height) {
            System.out.println(name + " cannot fly down " + feet + " feet.");
        } else {
            height -= feet;
            if (height == 0) {
                System.out.println(name + " has flown down " + feet + " feet and landed.");
            } else {
                System.out.println(name + " has flown down " + feet + " feet.");
            }
        }
    }

    void makeNoise() {
        if (name.equals("Parrot")) {
            System.out.println("Squawk");
        } else if (name.equals("Eagle")) {
            System.out.println("Squee");
        }
    }
}

#Task-11
Implement the “ChickenBurger” class with necessary properties, so that the given output is produced for the provided driver code.
[Note: 
1. There are four available spice levels: Mild, Spicy, Naga and Extreme. You can store these values in a String array.
2. You might need to use the .equals() method to compare two string values.]

public class BurgerMaker{
 public static void main(String [] args){
   ChickenBurger b1 = new ChickenBurger();
   System.out.println(b1.bun);
   System.out.println(b1.price);
   System.out.println(b1.sauceOption);
   System.out.println(b1.spiceLevel);
   System.out.println("----------1----------");
   System.out.println(b1.serveBurger());
   System.out.println("----------2----------");
   b1.customizeSpiceLevel("Extreme Jhaal");
   b1.customizeSpiceLevel("Spicy");
   System.out.println("----------3----------");
   System.out.println(b1.serveBurger());
   System.out.println("----------4----------");
   ChickenBurger b2 = new ChickenBurger();
   b2.bun = "Brioche";
   b2.price += 50;
   b2.sauceOption = "Regular";
   b2.customizeSpiceLevel("Naga");
   System.out.println("----------5----------");
   System.out.println(b2.serveBurger());
 }
}

public class ChickenBurger {
    String bun;
    int price;
    String sauceOption;
    String spiceLevel;

    // Available spice levels
    String[] spiceLevels = {"Mild", "Spicy", "Naga", "Extreme Jhaal"};

    // Default constructor
    public ChickenBurger() {
        bun = "Regular Bun";
        price = 200;
        sauceOption = "Special";
        spiceLevel = "Mild";  // default
    }

    // Method to customize spice level
    public void customizeSpiceLevel(String level) {
        for (String s : spiceLevels) {
            if (s.equals(level)) {
                spiceLevel = level;
                return;
            }
        }
        // if input not valid, do nothing
    }

    // Method to serve burger
    public String serveBurger() {
        return "Your order: " + bun + " with " + sauceOption +
               " sauce, Spice Level: " + spiceLevel +
               ", Price: " + price + " BDT";
    }
}

#Task-12 
Implement the “MobilePhone” class with necessary properties to produce output for the provided driver code.

public class MobilePhoneTester{
  public static void main(String args []){
    MobilePhone m1 = new MobilePhone();
    MobilePhone m2 = new MobilePhone();
    m1.setContactCapacity(5);
    m2.setContactCapacity(100);
    m1.details();
    System.out.println("1----------------");
    m1.addContact("John", 9866);
    m1.addContact("Maria", 7865);
    System.out.println("2----------------");
    m1.details();
    System.out.println("3----------------");
    m1.makeCall(9866);
    System.out.println("4----------------");
    m1.addContact("Henry", 2365);
    System.out.println("5----------------");
    m1.makeCall(7552);
    m1.makeCall(2365);
    System.out.println("6----------------");
    m1.addContact("Gomes", 4589);
    m1.addContact("Antony", 8421);
    m1.addContact("Tony", 5789);
    System.out.println("7----------------");
    m1.details();
  }
}

public class MobilePhone {
    private int contactCapacity;   // maximum number of contacts
    private int contactCount;      // how many contacts currently saved
    private String[] names;        // store contact names
    private int[] numbers;         // store contact numbers

    // Default constructor
    public MobilePhone() {
        contactCapacity = 0;
        contactCount = 0;
        names = new String[0];
        numbers = new int[0];
    }

    // Set contact capacity and reinitialize arrays
    public void setContactCapacity(int n) {
        contactCapacity = n;
        names = new String[n];
        numbers = new int[n];
        contactCount = 0; // reset
    }

    // Add new contact
    public void addContact(String name, int number) {
        if (contactCount < contactCapacity) {
            names[contactCount] = name;
            numbers[contactCount] = number;
            contactCount++;
        } else {
            System.out.println("Contact list is full. Cannot add " + name);
        }
    }

    // Make a call
    public void makeCall(int number) {
        for (int i = 0; i < contactCount; i++) {
            if (numbers[i] == number) {
                System.out.println("Calling " + names[i] + " ...");
                return;
            }
        }
        System.out.println("Number not found in contact list.");
    }

    // Show details
    public void details() {
        System.out.println("Mobile Phone Contact Capacity: " + contactCapacity);
        System.out.println("Contacts stored: " + contactCount);
        if (contactCount > 0) {
            System.out.println("Contact List:");
            for (int i = 0; i < contactCount; i++) {
                System.out.println(names[i] + " -> " + numbers[i]);
            }
        }
    }
}



  
  

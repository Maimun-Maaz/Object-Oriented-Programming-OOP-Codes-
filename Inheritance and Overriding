Inheritance and Overriding

#Task-01
Given the following classes, write the code for the BBAStudent class so that the following output is printed when we run the TestStudent class.
public class Student{
  private String name = "Just a Student"; 
  private String department = "nothing";
  
  public void setDepartment(String dpt){
    this.department = dpt;
  }
  public void setName(String name){
    this.name = name;
  }
  public void details(){
    System.out.println("Name : " + name + " Department: " + department);
  }
}


//Tester Class
public class TestStudent{
  public static void main(String [] args){
    BBAStudent b1 = new BBAStudent();
    BBAStudent b2 = new BBAStudent("Humty Dumty");
    BBAStudent b3 = new BBAStudent("Little Bo Peep"); 
    b1.details();
    System.out.println("1---------------");
    b2.details();
    System.out.println("2---------------");
    b3.details();
  }
}

public class BBAStudent extends Student {

    public BBAStudent() {
        setName("Default");
        setDepartment("BBA");
    }

    public BBAStudent(String name) {
        setName(name);
        setDepartment("BBA");
    }
}

#Task-02
Design the CheckingAccount class derived from the Account class with appropriate attributes and properties so that the driver code can generate the output given below. 

public class Account{
  public double balance = 0.0;
  
  public Account(double balance){
    this.balance = balance;
  }
  public double showBalance(){
    return balance;
  }
}
 
//Tester Class
public class TestAccount{
  public static void main(String [] args){
    System.out.println("Total Checking Accounts: "+CheckingAccount.count);
    CheckingAccount c1 = new CheckingAccount();
    System.out.println("Account Balance: " + c1.showBalance());
    CheckingAccount c2 = new CheckingAccount(100.0);
    System.out.println("Account Balance: " + c2.showBalance());
    CheckingAccount c3 = new CheckingAccount(200.0);
    System.out.println("Account Balance: " + c3.showBalance());
    System.out.println("Total Checking Accounts: "+CheckingAccount.count);
  }
}

public class CheckingAccount extends Account {
    public static int count = 0;

    public CheckingAccount() {
        super(0.0);
        count++;
    }

    public CheckingAccount(double balance) {
        super(balance);
        count++;
    }
}

#Task-03
Design the Dog and Cat class derived from the Animal class with appropriate attributes and properties so that the driver code can generate the output given below.

public class Animal {
    public String name;
    public int age;
    public String color;
    public Animal(String name, int age, String color) {
        this.name = name;
        this.age = age;
        this.color = color;
    }
    public void makeSound() {
        System.out.println("Animal makes a sound");
    }
    public String info() {
        return "Name: "+name+"\nAge: "+age+"\nColor: "+color+"\n";
    }
}

public class AnimalTester {
    public static void main(String[] args) {
      Dog dog = new Dog("Buddy", 5, "Brown", "Bulldog");
      Cat cat = new Cat("Kitty", 3, "White", "Persian");
      System.out.println("1.========");
      System.out.println(dog.info());
      System.out.println("2.========");
      System.out.println(cat.info());
      System.out.println("3.========");
      dog.makeSound();
      System.out.println("4.========");
      cat.makeSound();
    }
}

public class Dog extends Animal {
    public String breed;

    public Dog(String name, int age, String color, String breed) {
        super(name, age, color);
        this.breed = breed;
    }

    @Override
    public String info() {
        return super.info() + "Breed: " + breed;
    }

    @Override
    public void makeSound() {
        System.out.println(color + " color " + name + " is barking");
    }
}

public class Cat extends Animal {
    public String breed;

    public Cat(String name, int age, String color, String breed) {
        super(name, age, color);
        this.breed = breed;
    }

    @Override
    public String info() {
        return super.info() + "Breed: " + breed;
    }

    @Override
    public void makeSound() {
        System.out.println(color + " color " + name + " is meowing");
    }
}

#Task-04
Given the following classes, write the code for the Vehicle2010 class to print the following output when we run the Vehicle2010User class.

public class Vehicle{
  public int x;
  public int y;
  
  public void moveUp(){
    y = y+1;
  }
  public void moveDown(){
    y = y-1;
  }
  public void moveLeft(){
    x = x-1;
  }
  public void moveRight(){
    x = x+1;
  }
  public String toString(){
    return "("+ x + ","+ y + ")";
  }
}
 
//Tester Class
public class Vehicle2010User{
  public static void main(String[] args){
    Vehicle2010 car1 = new Vehicle2010();
    System.out.println(car1);
    car1.moveLowerLeft();
    System.out.println(car1);
    
    Vehicle2010 car2 = new Vehicle2010();
    System.out.println(car2);
    car2.moveUpperRight();
    System.out.println(car2);
    car2.moveLowerRight();
    System.out.println(car2);
  }
}

public class Vehicle2010 extends Vehicle {

    public void moveUpperRight() {
        moveUp();
        moveRight();
    }

    public void moveLowerRight() {
        moveDown();
        moveRight();
    }

    public void moveUpperLeft() {
        moveUp();
        moveLeft();
    }

    public void moveLowerLeft() {
        moveDown();
        moveLeft();
    }
}

#Task-05
Design the ComplexNumber class with the necessary property to produce the output from the given driver code. 
public class RealNumber {
    public double realValue;
    public RealNumber() {
        this(0.0);
    }
    public RealNumber(double realValue) {
        this.realValue = realValue;
    }
    public String toString(){
        return "RealPart: " + realValue;
    }
   
}
public class ComplexNumberTester {
    public static void main(String[] args) {
        ComplexNumber cn1 = new ComplexNumber();
        System.out.println(cn1);
        System.out.println("----------------");
        ComplexNumber cn2 = new ComplexNumber(5.0, 7.0);
        System.out.println(cn2);
    }
}

public class ComplexNumber extends RealNumber {
    public double imaginaryValue;

    public ComplexNumber() {
        super(1.0);           // default real part = 1.0
        this.imaginaryValue = 1.0; // default imaginary part = 1.0
    }

    public ComplexNumber(double realValue, double imaginaryValue) {
        super(realValue);
        this.imaginaryValue = imaginaryValue;
    }

    @Override
    public String toString() {
        return "RealPart: " + realValue + "\nImaginaryPart: " + imaginaryValue;
    }
}

#Task-06
Design the Manager and Developer class derived from the Employee class with appropriate attributes and properties so that the driver code can generate the output given below. [Hint:
Manager:
1.	Adds a bonus to the base salary if the manager works more than 40 hours.
2.	If the manager works more than 100 hours, the full amount is approved; if they work more than 80 hours, half the amount is approved. Otherwise, the increment is denied.
Developer:
1.	Adds $700 to the base salary if the developer works with Java programming language.]

public class Employee {
    public String name;
    private double baseSalary;
    private int hoursWorked;

    public Employee(String name, double baseSalary, int hoursWorked){
        this.name = name;
        this.baseSalary = baseSalary;
        this.hoursWorked = hoursWorked;
    }
    public double getBaseSalary() {
        return baseSalary;
    }
    public void setBaseSalary(double baseSalary) {
        this.baseSalary = baseSalary;
    }
    public int getHoursWorked() {
        return hoursWorked;
    }
    public void setHoursWorked(int hoursWorked) {
        this.hoursWorked = hoursWorked;
    }
    public void displayInfo() {
        System.out.println("Name: " + name);
        System.out.println("Base Salary: $" + baseSalary);
        System.out.println("Work Hours: " + hoursWorked);
    }
}

public class EmployeeTester {
 public static void main(String[] args) {
  Manager neymar = new Manager("Neymar",1000, 45, 10);
  Developer messi = new Developer("Messi",1000,50,"Java");
  Developer chiesa = new Developer("Chiesa", 1000, 50, "Javascript");
  neymar.calculateSalary();
  System.out.println("1.==========");
  neymar.displayInfo();
  System.out.println("2.==========");
  neymar.requestIncrement(100);
  System.out.println("3.==========");
  neymar.setHoursWorked(85);
  neymar.requestIncrement(100);
  System.out.println("4.==========");
  neymar.calculateSalary();
  System.out.println("5.==========");
  neymar.displayInfo();
  System.out.println("6.==========");
  messi.calculateSalary();
  System.out.println("7.==========");
  messi.displayInfo();
  System.out.println("8.==========");
  chiesa.calculateSalary();
  System.out.println("7.==========");
  chiesa.displayInfo();
 }
}

public class Manager extends Employee {
    private double bonusPercent;

    public Manager(String name, double baseSalary, int hoursWorked, double bonusPercent) {
        super(name, baseSalary, hoursWorked);
        this.bonusPercent = bonusPercent;
    }

    public void calculateSalary() {
        if (getHoursWorked() > 40) {
            double finalSalary = getBaseSalary() + (getBaseSalary() * (bonusPercent / 100));
            System.out.println("Name: " + name);
            System.out.println("Base Salary: $" + getBaseSalary());
            System.out.println("Work Hours: " + getHoursWorked());
            System.out.println("Bonus: " + bonusPercent + " %");
            System.out.println("Final Salary: $" + finalSalary);
        } else {
            System.out.println("Name: " + name);
            System.out.println("Base Salary: $" + getBaseSalary());
            System.out.println("Work Hours: " + getHoursWorked());
        }
    }

    public void requestIncrement(double amount) {
        int hours = getHoursWorked();
        if (hours > 100) {
            setBaseSalary(getBaseSalary() + amount);
            System.out.println("$" + (int) amount + " Increment approved.");
        } else if (hours > 80) {
            setBaseSalary(getBaseSalary() + (amount / 2));
            System.out.println("$" + (int) (amount / 2) + " Increment approved.");
        } else {
            System.out.println("Increment denied.");
        }
    }
}

public class Developer extends Employee {
    private String language;

    public Developer(String name, double baseSalary, int hoursWorked, String language) {
        super(name, baseSalary, hoursWorked);
        this.language = language;
    }

    public void calculateSalary() {
        double finalSalary = getBaseSalary();
        if (language.equalsIgnoreCase("Java")) {
            finalSalary += 700;
        }
        System.out.println("Name: " + name);
        System.out.println("Base Salary: $" + getBaseSalary());
        System.out.println("Work Hours: " + getHoursWorked());
        System.out.println("Language: " + language);
        System.out.println("Final Salary: $" + finalSalary);
    }
}

#Task-07

Design the CinemexTicket class derived from the MovieTicket Class so that the given output is produced:
❖	The seatTypes and seatPrices arrays contain the type of the seat and its corresponding price 
❖	Night show charge (15% of ticket price) will be applicable if the time is between 6:00 PM - 11:00 PM
❖	Unique id for a ticket is generated by: MovieName-FirstLetterOfSeatType-TicketCount
❖	You may need to use .split() and Integer.parseInt() built-in methods

public class MovieTicket {
    public static String [] seatTypes = {"Regular", "Premium", "IMAX 3D"};
    public static double [] seatPrices = {300.0, 450.0, 600.0};
    public static int nightShowCharge = 15;    
    private String movie;
    public String showtime;
    public String date;
    private double price;
    public String seat;

    public MovieTicket(String movie, String date, String showtime, double price) {
        this.movie = movie;
        this.showtime = showtime;
        this.date = date;
        this.price = price;
        this.seat = "Not Selected";
    }
    public void setPrice(double price) {
        this.price = price;
    }
    public double getPrice() {
        return price;
    }
    public String getMovie() {
        return movie;
    }

    public String toString() {
        return "Movie: " + movie + "\nShowtime: " + showtime + "\nDate: " + date;
    }
}

//Driver Code
public class Tester {
 public static void main(String[] args) {
   CinemexTicket ticket1 = new CinemexTicket("Deadpool and Wolverine", "18:30", "Action-Comedy", "July 24, 2024");
   System.out.println("Total movie ticket(s): " + CinemexTicket.getTotalTickets());
   System.out.println("1============================");
   ticket1.calculateTicketPrice();
   System.out.println("2============================");
   System.out.println(ticket1);
   System.out.println("3============================");
   System.out.println(ticket1.confirmPayment());
   System.out.println("4============================");
   System.out.println(ticket1);
   System.out.println("5============================");
   CinemexTicket ticket2 = new CinemexTicket("Twisters", "10:00", "Sci-Fi", "August 10, 2024", "Premium");
  System.out.println("Total movie ticket(s): " + CinemexTicket.getTotalTickets());
  System.out.println("6============================");
  ticket2.calculateTicketPrice();
  System.out.println("7============================");        
  System.out.println(ticket2.confirmPayment());
  System.out.println("8============================");
  System.out.println(ticket2);
  System.out.println("9============================");
  System.out.println(ticket2.confirmPayment());
 }
}

public class CinemexTicket extends MovieTicket {
    private static int ticketCount = 0;
    private String genre;
    private String seatType;
    private String ticketID;
    private String status;

    // Constructor 1 (default seat type = Regular)
    public CinemexTicket(String movie, String showtime, String genre, String date) {
        super(movie, date, showtime, 0.0);
        this.genre = genre;
        this.seatType = "Regular";
        this.status = "Not Paid";
        ticketCount++;
        this.ticketID = generateTicketID();
    }

    // Constructor 2 (custom seat type)
    public CinemexTicket(String movie, String showtime, String genre, String date, String seatType) {
        super(movie, date, showtime, 0.0);
        this.genre = genre;
        this.seatType = seatType;
        this.status = "Not Paid";
        ticketCount++;
        this.ticketID = generateTicketID();
    }

    // Method to generate ticket ID
    private String generateTicketID() {
        return getMovie() + "-" + seatType.charAt(0) + "-" + ticketCount;
    }

    // Method to calculate ticket price
    public void calculateTicketPrice() {
        double basePrice = 0.0;
        for (int i = 0; i < seatTypes.length; i++) {
            if (seatTypes[i].equalsIgnoreCase(seatType)) {
                basePrice = seatPrices[i];
                break;
            }
        }

        // Check if showtime is between 18:00 and 23:00 (night show)
        String[] timeParts = showtime.split(":");
        int hour = Integer.parseInt(timeParts[0]);
        int minute = Integer.parseInt(timeParts[1]);

        double finalPrice = basePrice;
        if ((hour >= 18 && hour < 23) || (hour == 23 && minute == 0)) {
            finalPrice += (basePrice * nightShowCharge) / 100.0;
        }

        setPrice(finalPrice);
        System.out.println("Ticket price is calculated successfully.");
    }

    // Confirm payment method
    public String confirmPayment() {
        if (status.equals("Paid")) {
            return "Ticket price is already paid!";
        } else {
            status = "Paid";
            return "Payment Successful.";
        }
    }

    // Static method for total tickets
    public static int getTotalTickets() {
        return ticketCount;
    }

    // Overriding toString() method
    @Override
    public String toString() {
        return "Ticket ID: " + ticketID + "\n" +
               super.toString() + "\n" +
               "Genre: " + genre + "\n" +
               "Seat Type: " + seatType + "\n" +
               "Price(tk): " + getPrice() + "\n" +
               "Status: " + status;
    }
}

#Task-08
Design the KKTea (parent) and KKFlavouredTea (child) classes so that the following output is produced. The KKFlavouredTea class should inherit KKTea and KKTea should inherit the Tea class. Note that: 
●	An object of either class represents a single box of teabags. 
●	Each tea bag weighs 2 grams. 
●	The status of an object refers to whether it is sold or not

public class Tea {
    public String name;
    public int price;
    public boolean status;

    public Tea(String name, int price) {
        this.name = name;
        this.price = price;
        this.status = false;
    }

    public void productDetail() {
        System.out.println("Name: " + name + ", Price: " + price);
        System.out.println("Status: " + status);
    }
}
//Driver Code
public class TeaTester{
 public static void main(String[] args) {
   KKTea t1 = new KKTea(250, 50);
   System.out.println("--------1---------");
   t1.productDetail();
   System.out.println("--------2---------");
   KKTea.totalSales();
   System.out.println("--------3---------");
   KKTea t2 = new KKTea(470, 100);
   KKTea t3 = new KKTea(360, 75);
   KKTea.updateSoldStatusRegular(t1);
   KKTea.updateSoldStatusRegular(t2);
   System.out.println("--------4---------");
   t2.productDetail();
   System.out.println("--------5---------");
   KKTea.totalSales();
   System.out.println("--------6---------");
   KKFlavouredTea t4 = new KKFlavouredTea("Jasmine", 260, 50);
   KKFlavouredTea t5 = new KKFlavouredTea("Honey Lemon", 270, 45);
   KKFlavouredTea t6 = new KKFlavouredTea("Honey Lemon", 270, 45);
   System.out.println("--------7---------");
   t4.productDetail();
   System.out.println("--------8---------");
   t6.productDetail();
   System.out.println("--------9---------");
   KKFlavouredTea.updateSoldStatusFlavoured(t4);
   KKFlavouredTea.updateSoldStatusFlavoured(t5);
   KKFlavouredTea.updateSoldStatusFlavoured(t6);
   System.out.println("--------10---------");
   KKTea.totalSales();
 }
}

public class KKTea extends Tea {
    public int teaBags;
    public int weight; // total weight in grams

    // Static counters for total sales
    protected static int totalSales = 0;
    protected static int regularSales = 0;

    public KKTea(int price, int teaBags) {
        super("KK Regular Tea", price);
        this.teaBags = teaBags;
        this.weight = teaBags * 2; // each tea bag = 2 grams
    }

    @Override
    public void productDetail() {
        super.productDetail();
        System.out.println("Weight: " + weight + ", Tea Bags: " + teaBags);
    }

    public static void updateSoldStatusRegular(KKTea t) {
        if (!t.status) {
            t.status = true;
            totalSales++;
            regularSales++;
        }
    }

    public static void totalSales() {
        System.out.println("Total Sales: " + totalSales);
        System.out.println("KK Regular Tea: " + regularSales);
    }
}

public class KKFlavouredTea extends KKTea {
    private String flavour;
    private static int flavouredSales = 0;

    public KKFlavouredTea(String flavour, int price, int teaBags) {
        super(price, teaBags);
        this.flavour = flavour;
        this.name = "KK " + flavour + " Tea";
    }

    @Override
    public void productDetail() {
        super.productDetail();
    }

    public static void updateSoldStatusFlavoured(KKFlavouredTea t) {
        if (!t.status) {
            t.status = true;
            totalSales++;
            flavouredSales++;
        }
    }

    public static void totalSales() {
        System.out.println("Total Sales: " + totalSales);
        System.out.println("KK Regular Tea: " + regularSales);
        System.out.println("KK Flavoured Tea: " + flavouredSales);
    }
}



